diff --git a/README.md b/README.md
index 5f27d55e..03fd5b9d 100644
--- a/README.md
+++ b/README.md
@@ -5,6 +5,8 @@ rCore-Tutorial API Docs.  See the [API Docs of Ten OSes ](#OS-API-DOCS)
 
 Official QQ group number: 735045051
 
+d47nV3fgZm9idWR
+
 ## news
 - 25/01/2022: Version 3.6.0 is on the way! Now we directly update the code on chX branches, please periodically check if there are any updates.
 
diff --git a/os/Cargo.toml b/os/Cargo.toml
index 8f463bac..36abe1f6 100644
--- a/os/Cargo.toml
+++ b/os/Cargo.toml
@@ -7,6 +7,8 @@ edition = "2018"
 # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
 
 [dependencies]
+log='0.4.17'
+
 
 [profile.release]
 debug = true
diff --git a/os/Makefile b/os/Makefile
index 2bc72342..a518ed3d 100644
--- a/os/Makefile
+++ b/os/Makefile
@@ -4,6 +4,7 @@ MODE := release
 KERNEL_ELF := target/$(TARGET)/$(MODE)/os
 KERNEL_BIN := $(KERNEL_ELF).bin
 DISASM_TMP := target/$(TARGET)/$(MODE)/asm
+LOG := DEBUG
 
 # Building mode argument
 ifeq ($(MODE), release)
@@ -55,7 +56,7 @@ $(KERNEL_BIN): kernel
 kernel:
 	@echo Platform: $(BOARD)
 	@cp src/linker-$(BOARD).ld src/linker.ld
-	@cargo build $(MODE_ARG)
+	@export LOG=$(LOG); cargo build $(MODE_ARG)
 	@rm src/linker.ld
 
 clean:
diff --git a/os/src/logging.rs b/os/src/logging.rs
new file mode 100644
index 00000000..7497a3bd
--- /dev/null
+++ b/os/src/logging.rs
@@ -0,0 +1,46 @@
+use log::{self, Log, Level, LevelFilter};
+
+pub fn init() {
+    static LOGGER: SimpleLogger = SimpleLogger;
+    log::set_logger(&LOGGER).unwrap();
+    log::set_max_level(match option_env!("LOG") {
+        Some("ERROR") => LevelFilter::Error,
+        Some("WARN") => LevelFilter::Warn,
+        Some("INFO") => LevelFilter::Info,
+        Some("DEBUG") => LevelFilter::Debug,
+        Some("TRACE") => LevelFilter::Trace,
+        _ => LevelFilter::Off,
+    });
+}
+
+struct SimpleLogger;
+
+impl Log for SimpleLogger {
+    fn enabled(&self, _: &log::Metadata) -> bool {
+        true
+    }
+
+    fn log(&self, record: &log::Record) {
+        if !self.enabled(record.metadata()) {
+            return
+        }
+        
+        print!("\x1b[{}m", level_to_color_code(record.level()));
+        println!("[{}] {}", record.level(), record.args());
+        print!("\x1b[0m");
+    }
+
+    fn flush(&self) {
+        
+    }
+}
+
+fn level_to_color_code(level: Level) -> u8 {
+    match level {
+        Level::Error => 31, // Red
+        Level::Warn => 93,  // BrightYellow
+        Level::Info => 34,  // Blue
+        Level::Debug => 32, // Green
+        Level::Trace => 90, // BrightBlack
+    }
+}
diff --git a/os/src/main.rs b/os/src/main.rs
index fcb396cc..522dd2e4 100644
--- a/os/src/main.rs
+++ b/os/src/main.rs
@@ -19,6 +19,9 @@ use core::arch::global_asm;
 mod console;
 mod lang_items;
 mod sbi;
+mod logging;
+
+use log::*;
 
 global_asm!(include_str!("entry.asm"));
 
@@ -45,16 +48,19 @@ pub fn rust_main() -> ! {
         fn ebss();                // end addr of BSS segment
         fn boot_stack();          // stack bottom
         fn boot_stack_top();      // stack top
-    }
+    }    
     clear_bss();
-    println!("Hello, world!");
-    println!(".text [{:#x}, {:#x})", stext as usize, etext as usize);
-    println!(".rodata [{:#x}, {:#x})", srodata as usize, erodata as usize);
-    println!(".data [{:#x}, {:#x})", sdata as usize, edata as usize);
-    println!(
+    logging::init();
+
+    warn!("Deallocate frame: {:#x}", stext as usize);
+    info!("hello world");
+    info!(".text [{:#x}, {:#x})", stext as usize, etext as usize);
+    info!(".rodata [{:#x}, {:#x})", srodata as usize, erodata as usize);
+    info!(".data [{:#x}, {:#x})", sdata as usize, edata as usize);
+    info!(
         "boot_stack [{:#x}, {:#x})",
         boot_stack as usize, boot_stack_top as usize
     );
-    println!(".bss [{:#x}, {:#x})", sbss as usize, ebss as usize);
+    info!(".bss [{:#x}, {:#x})", sbss as usize, ebss as usize);
     panic!("Shutdown machine!");
 }
